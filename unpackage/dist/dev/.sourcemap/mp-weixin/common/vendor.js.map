{"version":3,"sources":["uni-app:///F:/HBuilderX.3.1.13.20210514.full/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/uni-mp-weixin/dist/index.js","uni-app:///F:/HBuilderX.3.1.13.20210514.full/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js","uni-app:///F:/HBuilderX.3.1.13.20210514.full/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js","uni-app:///F:/HBuilderX.3.1.13.20210514.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js","uni-app:///pages/pianoGame/event-bus.js","uni-app:///config/NoteConfig.js","uni-app:///config/KeyBoardConfig.js","uni-app:///config/NoteOggConfig.js"],"names":["b64DecodeUnicode","str","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","getCurrentUserInfo","token","wx","getStorageSync","tokenArr","length","uid","role","permission","tokenExpired","userInfo","JSON","parse","error","Error","message","exp","iat","uniIdMixin","Vue","prototype","uniIDHasRole","roleId","indexOf","uniIDHasPermission","permissionId","uniIDTokenValid","Date","now","_toString","Object","hasOwnProperty","isFn","fn","isStr","isPlainObject","obj","call","hasOwn","key","noop","cached","cache","create","cachedFn","hit","camelizeRE","camelize","replace","_","toUpperCase","HOOKS","globalInterceptors","scopedInterceptors","mergeHook","parentVal","childVal","res","concat","Array","isArray","dedupeHooks","hooks","i","push","removeHook","hook","index","splice","mergeInterceptorHook","interceptor","option","keys","forEach","removeInterceptorHook","addInterceptor","method","removeInterceptor","wrapperHook","data","isPromise","then","queue","promise","Promise","resolve","callback","wrapperOptions","options","name","oldCallback","callbackInterceptor","wrapperReturnValue","returnValue","returnValueHooks","getApiInterceptorHooks","scopedInterceptor","invokeApi","api","params","invoke","promiseInterceptor","catch","SYNC_API_RE","CONTEXT_API_RE","CONTEXT_API_RE_EXC","ASYNC_API","CALLBACK_API_RE","isContextApi","test","isSyncApi","isCallbackApi","handlePromise","err","shouldPromise","finally","constructor","value","reason","promisify","promiseApi","success","fail","complete","reject","assign","EPS","BASE_DEVICE_WIDTH","isIOS","deviceWidth","deviceDPR","checkDeviceWidth","getSystemInfoSync","platform","pixelRatio","windowWidth","upx2px","number","newDeviceWidth","Number","result","Math","floor","interceptors","baseApi","freeze","__proto__","findExistsPageIndex","url","pages","getCurrentPages","len","page","$page","fullPath","redirectTo","fromArgs","exists","delta","args","existsPageIndex","previewImage","currentIndex","parseInt","current","isNaN","urls","filter","item","indicator","loop","UUID_KEY","deviceId","addUuid","random","setStorage","addSafeAreaInsets","safeArea","safeAreaInsets","top","left","right","bottom","windowHeight","getSystemInfo","protocols","todos","canIUses","CALLBACKS","processCallback","methodName","processReturnValue","processArgs","argsOption","keepFromArgs","toArgs","keyOption","console","warn","keepReturnValue","wrapper","protocol","arg1","arg2","apply","todoApis","TODOS","createTodoApi","todoApi","errMsg","providers","oauth","share","payment","getProvider","service","provider","extraApi","getEmitter","Emitter","getUniEmitter","ctx","$on","arguments","$off","$once","$emit","eventApi","MPPage","Page","MPComponent","Component","customizeRE","customize","initTriggerEvent","mpInstance","canIUse","oldTriggerEvent","triggerEvent","event","initHook","oldHook","__$wrappered","after","PAGE_EVENT_HOOKS","initMocks","vm","mocks","$mp","mpType","mock","hasHook","vueOptions","default","extendOptions","super","mixins","find","mixin","initHooks","mpOptions","$vm","__call_hook","initVueComponent","VueComponent","extend","initSlots","vueSlots","$slots","slotName","$scopedSlots","initVueIds","vueIds","_$vueId","_$vuePid","initData","context","methods","e","process","VUE_APP_DEBUG","stringify","__lifecycle_hooks__","PROP_TYPES","String","Boolean","createObserver","observer","newVal","oldVal","initBehaviors","initBehavior","vueBehaviors","behaviors","vueExtends","extends","vueMixins","vueProps","props","behavior","type","properties","initProperties","vueMixin","parsePropType","defaultValue","file","isBehavior","vueId","generic","setData","opts","wrapper$1","mp","stopPropagation","preventDefault","target","detail","markerId","getExtraValue","dataPathsArray","dataPathArray","dataPath","propPath","valuePath","vFor","isInteger","substr","__get_value","vForItem","vForKey","processEventExtra","extra","extraObj","__args__","getObjByArray","arr","element","processEventArgs","isCustom","isCustomMPEvent","currentTarget","dataset","comType","ret","arg","ONCE","CUSTOM","isMatchEventType","eventType","optType","getContextVm","$parent","$options","$scope","handleEvent","eventOpts","eventOpt","eventsArray","charAt","isOnce","eventArray","handlerCtx","handler","once","eventChannels","eventChannelStack","getEventChannel","id","eventChannel","shift","initEventChannel","getOpenerEventChannel","callHook","__id__","__eventChannel__","initScopedSlotsParams","center","parents","$hasScopedSlotsParams","has","$getScopedSlotsParams","object","$setScopedSlotsParams","propsData","$forceUpdate","destroyed","parseBaseApp","initRefs","store","$store","mpHost","beforeCreate","getApp","app","$i18n","_i18n","appOptions","onLaunch","globalData","_isMounted","findVmByVueId","vuePid","$children","childVm","parentVm","Behavior","isPage","route","initRelation","selectAllComponents","selector","$refs","components","component","ref","vueGeneric","scopedComponent","defineProperty","get","forComponents","handleLink","parent","parseApp","createApp","App","encodeReserveRE","encodeReserveReplacer","commaRE","encode","encodeURIComponent","stringifyQuery","encodeStr","val","undefined","val2","x","parseBaseComponent","vueComponentOptions","multipleSlots","addGlobalClass","componentOptions","__file","lifetimes","attached","$mount","ready","detached","$destroy","pageLifetimes","show","hide","resize","size","__l","__e","externalClasses","wxsCallMethods","callMethod","parseComponent","hooks$1","parseBasePage","vuePageOptions","pageOptions","onLoad","query","copyQuery","is","parsePage","createPage","createComponent","createSubpackageApp","allowDefault","onShow","onAppShow","onHide","onAppHide","getLaunchOptionsSync","createPlugin","canIUseApi","apiName","uni","Proxy","set","uni$1","EventBus","rightNotes","step","do","pos","pitchName","leftNotes","getRandomNoteItem","getKeyboardConfig","keyboardHeight","required","getNoteOgg","C","UpC","D","UpD","E","F","UpF","G","UpG","A","UpA","B"],"mappings":"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uF,IAAD,CAAT,CAAd,CAArB;AACD;AACF,GAJD;AAKD;;AAEDvF,EAAE,CAACsa,SAAH,GAAeA,SAAf;AACAta,EAAE,CAACmd,UAAH,GAAgBA,UAAhB;AACAnd,EAAE,CAACod,eAAH,GAAqBA,eAArB;AACApd,EAAE,CAACqd,mBAAH,GAAyBA,mBAAzB;AACArd,EAAE,CAAC4d,YAAH,GAAkBA,YAAlB;;AAEA,IAAIM,KAAK,GAAGH,GAAZ,C;;AAEeG,K;;;;;;;;;;;;ACr3Df;AAAA;AAAA;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClHA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,sBAAsB,+BAA+B;AACrD,sBAAsB,iBAAiB;AACvC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iCAAiC,EAAE;AACrF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,cAAc;;AAE3C;;AAEA;AACA;AACA;AACA,6BAA6B,UAAU;;AAEvC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,aAAoB;;AAErC;AACA;AACA;AACA,YAAY,aAAoB;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;AACR;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA,oCAAoC;AACpC;;AAEA,IAAI,IAAqC;AACzC;AACA;AACA,iCAAiC;AACjC,uCAAuC,wBAAwB,EAAE;AACjE,0BAA0B;;AAE1B;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,wCAAwC,EAAE;AAC1C;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA,+BAA+B,oBAAoB,EAAE;AACrD;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,SAAS,qBAAqB;;AAExD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAqC;AAC/C;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,IAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAqC;AACzC;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD,iCAAiC,sBAAsB;AACvD;AACA,kBAAkB;AAClB,MAAM,IAAqC;AAC3C;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAoB;AACtC;AACA;AACA,mBAAmB;AACnB;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,OAAO,UAAU,IAAqC;AACtD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,GAAG,UAAU,IAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,mBAAmB;AACtC,+BAA+B;AAC/B;AACA,GAAG;AACH;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B,WAAW;AACX;AACA,GAAG,UAAU,IAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,oCAAoC;AACpC;AACA,qCAAqC;AACrC;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAEQ;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,qCAAqC,EAAE;AACpF;;AAEA;AACA;AACA;;AAEA,oCAAoC,yCAAyC,EAAE;AAC/E;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sDAAsD,EAAE;AACtF;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI,IAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C,GAAG;AACH;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;;AAEA;AACA;;AAEA,IAAI,IAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,qBAAqB;AAClC;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO,MAAM,EAEN;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,IAAqC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,sBAAsB,mBAAmB;AACzC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,uCAAuC;AACvC;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB,sCAAsC;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC,OAAO;AACzC;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,UAAU,KAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,4CAA4C,eAAe;AAC3D,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kDAAkD;AAClD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA,KAAK;AACL,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,KAAK,UAAU,KAAqC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,qCAAqC,gEAAgE;AACrG;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,4BAA4B,+BAA+B;AAC3D,4BAA4B,+BAA+B;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C,kDAAkD;AAClD;AACA;AACA,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sEAAsE;;AAEtE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,uFAAuF;AAC5F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,+BAA+B;AAClC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,oBAAoB,oBAAoB;AACxC,sBAAsB,4BAA4B;AAClD;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,yBAAyB;AACzB;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAA6C;AAC9E;AACA;AACA,6CAA6C,4CAA4C;;AAEzF;AACA;AACA;;AAEA;AACA,MAAM,IAAqC;AAC3C;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG,MAAM,EAGN;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,KAAqC;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,KAAK,2CAA2C,8BAA8B,EAAE;;AAEhF;AACA,wCAAwC,OAAO;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAqC;AACrD;AACA,oBAAoB,SAAI;AACxB;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;;AAE1B,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM,IAAqC;AAC3C;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0BAA0B;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB,EAAE;;AAEpD;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,KAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,KAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,oBAAoB;AACpB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,oBAAoB,KAAqC;AACzD;AACA,MAAM,SAAE;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C,qBAAqB,+BAA+B;AACpD;AACA;AACA,GAAG;AACH,yBAAyB;AACzB;AACA,sBAAsB,iCAAiC;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK,MAAM,EAEN;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,KAAqC;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,UAAU,IAAqC;AACpD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,8BAA8B;AAC9B,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,KAAqC;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA,KAAK,MAAM,EAEN;AACL;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,sCAAsC;AACtC,8C;;AAEA;AACA,QAAQ,KAAqC;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,KAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;;AAEA;AACA,QAAQ,KAAqC;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,YAAY,KAAqC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,0CAA0C,2BAA2B,EAAE;AACvE,KAAK;AACL;AACA,0CAA0C,4BAA4B,EAAE;AACxE,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,YAAY,8GAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,gCAAgC,EAAE;AAC5E;;AAEA;AACA;AACA;AACA;AACA,WAAW,8GAAW;AACtB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,8GAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,0CAA0C;;AAE1C;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,KAAK;AACL;AACA;AACA,UAAU,8GAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qDAAqD,EAAE,SAAS;AACtH;;AAEA;AACA;AACA;AACA;AACA;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","file":"common/vendor.js","sourcesContent":["import Vue from 'vue';\r\n\r\nfunction b64DecodeUnicode (str) {\r\n  return decodeURIComponent(atob(str).split('').map(function (c) {\r\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\r\n  }).join(''))\r\n}\r\n\r\nfunction getCurrentUserInfo () {\r\n  const token = ( wx).getStorageSync('uni_id_token') || '';\r\n  const tokenArr = token.split('.');\r\n  if (!token || tokenArr.length !== 3) {\r\n    return {\r\n      uid: null,\r\n      role: [],\r\n      permission: [],\r\n      tokenExpired: 0\r\n    }\r\n  }\r\n  let userInfo;\r\n  try {\r\n    userInfo = JSON.parse(b64DecodeUnicode(tokenArr[1]));\r\n  } catch (error) {\r\n    throw new Error('获取当前用户信息出错，详细错误信息为：' + error.message)\r\n  }\r\n  userInfo.tokenExpired = userInfo.exp * 1000;\r\n  delete userInfo.exp;\r\n  delete userInfo.iat;\r\n  return userInfo\r\n}\r\n\r\nfunction uniIdMixin (Vue) {\r\n  Vue.prototype.uniIDHasRole = function (roleId) {\r\n    const {\r\n      role\r\n    } = getCurrentUserInfo();\r\n    return role.indexOf(roleId) > -1\r\n  };\r\n  Vue.prototype.uniIDHasPermission = function (permissionId) {\r\n    const {\r\n      permission\r\n    } = getCurrentUserInfo();\r\n    return this.uniIDHasRole('admin') || permission.indexOf(permissionId) > -1\r\n  };\r\n  Vue.prototype.uniIDTokenValid = function () {\r\n    const {\r\n      tokenExpired\r\n    } = getCurrentUserInfo();\r\n    return tokenExpired > Date.now()\r\n  };\r\n}\r\n\r\nconst _toString = Object.prototype.toString;\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction isFn (fn) {\r\n  return typeof fn === 'function'\r\n}\r\n\r\nfunction isStr (str) {\r\n  return typeof str === 'string'\r\n}\r\n\r\nfunction isPlainObject (obj) {\r\n  return _toString.call(obj) === '[object Object]'\r\n}\r\n\r\nfunction hasOwn (obj, key) {\r\n  return hasOwnProperty.call(obj, key)\r\n}\r\n\r\nfunction noop () {}\r\n\r\n/**\r\n * Create a cached version of a pure function.\r\n */\r\nfunction cached (fn) {\r\n  const cache = Object.create(null);\r\n  return function cachedFn (str) {\r\n    const hit = cache[str];\r\n    return hit || (cache[str] = fn(str))\r\n  }\r\n}\r\n\r\n/**\r\n * Camelize a hyphen-delimited string.\r\n */\r\nconst camelizeRE = /-(\\w)/g;\r\nconst camelize = cached((str) => {\r\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')\r\n});\r\n\r\nconst HOOKS = [\r\n  'invoke',\r\n  'success',\r\n  'fail',\r\n  'complete',\r\n  'returnValue'\r\n];\r\n\r\nconst globalInterceptors = {};\r\nconst scopedInterceptors = {};\r\n\r\nfunction mergeHook (parentVal, childVal) {\r\n  const res = childVal\r\n    ? parentVal\r\n      ? parentVal.concat(childVal)\r\n      : Array.isArray(childVal)\r\n        ? childVal : [childVal]\r\n    : parentVal;\r\n  return res\r\n    ? dedupeHooks(res)\r\n    : res\r\n}\r\n\r\nfunction dedupeHooks (hooks) {\r\n  const res = [];\r\n  for (let i = 0; i < hooks.length; i++) {\r\n    if (res.indexOf(hooks[i]) === -1) {\r\n      res.push(hooks[i]);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction removeHook (hooks, hook) {\r\n  const index = hooks.indexOf(hook);\r\n  if (index !== -1) {\r\n    hooks.splice(index, 1);\r\n  }\r\n}\r\n\r\nfunction mergeInterceptorHook (interceptor, option) {\r\n  Object.keys(option).forEach(hook => {\r\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\r\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeInterceptorHook (interceptor, option) {\r\n  if (!interceptor || !option) {\r\n    return\r\n  }\r\n  Object.keys(option).forEach(hook => {\r\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\r\n      removeHook(interceptor[hook], option[hook]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction addInterceptor (method, option) {\r\n  if (typeof method === 'string' && isPlainObject(option)) {\r\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\r\n  } else if (isPlainObject(method)) {\r\n    mergeInterceptorHook(globalInterceptors, method);\r\n  }\r\n}\r\n\r\nfunction removeInterceptor (method, option) {\r\n  if (typeof method === 'string') {\r\n    if (isPlainObject(option)) {\r\n      removeInterceptorHook(scopedInterceptors[method], option);\r\n    } else {\r\n      delete scopedInterceptors[method];\r\n    }\r\n  } else if (isPlainObject(method)) {\r\n    removeInterceptorHook(globalInterceptors, method);\r\n  }\r\n}\r\n\r\nfunction wrapperHook (hook) {\r\n  return function (data) {\r\n    return hook(data) || data\r\n  }\r\n}\r\n\r\nfunction isPromise (obj) {\r\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\r\n}\r\n\r\nfunction queue (hooks, data) {\r\n  let promise = false;\r\n  for (let i = 0; i < hooks.length; i++) {\r\n    const hook = hooks[i];\r\n    if (promise) {\r\n      promise = Promise.resolve(wrapperHook(hook));\r\n    } else {\r\n      const res = hook(data);\r\n      if (isPromise(res)) {\r\n        promise = Promise.resolve(res);\r\n      }\r\n      if (res === false) {\r\n        return {\r\n          then () {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return promise || {\r\n    then (callback) {\r\n      return callback(data)\r\n    }\r\n  }\r\n}\r\n\r\nfunction wrapperOptions (interceptor, options = {}) {\r\n  ['success', 'fail', 'complete'].forEach(name => {\r\n    if (Array.isArray(interceptor[name])) {\r\n      const oldCallback = options[name];\r\n      options[name] = function callbackInterceptor (res) {\r\n        queue(interceptor[name], res).then((res) => {\r\n          /* eslint-disable no-mixed-operators */\r\n          return isFn(oldCallback) && oldCallback(res) || res\r\n        });\r\n      };\r\n    }\r\n  });\r\n  return options\r\n}\r\n\r\nfunction wrapperReturnValue (method, returnValue) {\r\n  const returnValueHooks = [];\r\n  if (Array.isArray(globalInterceptors.returnValue)) {\r\n    returnValueHooks.push(...globalInterceptors.returnValue);\r\n  }\r\n  const interceptor = scopedInterceptors[method];\r\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\r\n    returnValueHooks.push(...interceptor.returnValue);\r\n  }\r\n  returnValueHooks.forEach(hook => {\r\n    returnValue = hook(returnValue) || returnValue;\r\n  });\r\n  return returnValue\r\n}\r\n\r\nfunction getApiInterceptorHooks (method) {\r\n  const interceptor = Object.create(null);\r\n  Object.keys(globalInterceptors).forEach(hook => {\r\n    if (hook !== 'returnValue') {\r\n      interceptor[hook] = globalInterceptors[hook].slice();\r\n    }\r\n  });\r\n  const scopedInterceptor = scopedInterceptors[method];\r\n  if (scopedInterceptor) {\r\n    Object.keys(scopedInterceptor).forEach(hook => {\r\n      if (hook !== 'returnValue') {\r\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\r\n      }\r\n    });\r\n  }\r\n  return interceptor\r\n}\r\n\r\nfunction invokeApi (method, api, options, ...params) {\r\n  const interceptor = getApiInterceptorHooks(method);\r\n  if (interceptor && Object.keys(interceptor).length) {\r\n    if (Array.isArray(interceptor.invoke)) {\r\n      const res = queue(interceptor.invoke, options);\r\n      return res.then((options) => {\r\n        return api(wrapperOptions(interceptor, options), ...params)\r\n      })\r\n    } else {\r\n      return api(wrapperOptions(interceptor, options), ...params)\r\n    }\r\n  }\r\n  return api(options, ...params)\r\n}\r\n\r\nconst promiseInterceptor = {\r\n  returnValue (res) {\r\n    if (!isPromise(res)) {\r\n      return res\r\n    }\r\n    return res.then(res => {\r\n      return res[1]\r\n    }).catch(res => {\r\n      return res[0]\r\n    })\r\n  }\r\n};\r\n\r\nconst SYNC_API_RE =\r\n  /^\\$|Window$|WindowStyle$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\r\n\r\nconst CONTEXT_API_RE = /^create|Manager$/;\r\n\r\n// Context例外情况\r\nconst CONTEXT_API_RE_EXC = ['createBLEConnection'];\r\n\r\n// 同步例外情况\r\nconst ASYNC_API = ['createBLEConnection'];\r\n\r\nconst CALLBACK_API_RE = /^on|^off/;\r\n\r\nfunction isContextApi (name) {\r\n  return CONTEXT_API_RE.test(name) && CONTEXT_API_RE_EXC.indexOf(name) === -1\r\n}\r\nfunction isSyncApi (name) {\r\n  return SYNC_API_RE.test(name) && ASYNC_API.indexOf(name) === -1\r\n}\r\n\r\nfunction isCallbackApi (name) {\r\n  return CALLBACK_API_RE.test(name) && name !== 'onPush'\r\n}\r\n\r\nfunction handlePromise (promise) {\r\n  return promise.then(data => {\r\n    return [null, data]\r\n  })\r\n    .catch(err => [err])\r\n}\r\n\r\nfunction shouldPromise (name) {\r\n  if (\r\n    isContextApi(name) ||\r\n    isSyncApi(name) ||\r\n    isCallbackApi(name)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\n/* eslint-disable no-extend-native */\r\nif (!Promise.prototype.finally) {\r\n  Promise.prototype.finally = function (callback) {\r\n    const promise = this.constructor;\r\n    return this.then(\r\n      value => promise.resolve(callback()).then(() => value),\r\n      reason => promise.resolve(callback()).then(() => {\r\n        throw reason\r\n      })\r\n    )\r\n  };\r\n}\r\n\r\nfunction promisify (name, api) {\r\n  if (!shouldPromise(name)) {\r\n    return api\r\n  }\r\n  return function promiseApi (options = {}, ...params) {\r\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\r\n      return wrapperReturnValue(name, invokeApi(name, api, options, ...params))\r\n    }\r\n    return wrapperReturnValue(name, handlePromise(new Promise((resolve, reject) => {\r\n      invokeApi(name, api, Object.assign({}, options, {\r\n        success: resolve,\r\n        fail: reject\r\n      }), ...params);\r\n    })))\r\n  }\r\n}\r\n\r\nconst EPS = 1e-4;\r\nconst BASE_DEVICE_WIDTH = 750;\r\nlet isIOS = false;\r\nlet deviceWidth = 0;\r\nlet deviceDPR = 0;\r\n\r\nfunction checkDeviceWidth () {\r\n  const {\r\n    platform,\r\n    pixelRatio,\r\n    windowWidth\r\n  } = wx.getSystemInfoSync(); // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\r\n\r\n  deviceWidth = windowWidth;\r\n  deviceDPR = pixelRatio;\r\n  isIOS = platform === 'ios';\r\n}\r\n\r\nfunction upx2px (number, newDeviceWidth) {\r\n  if (deviceWidth === 0) {\r\n    checkDeviceWidth();\r\n  }\r\n\r\n  number = Number(number);\r\n  if (number === 0) {\r\n    return 0\r\n  }\r\n  let result = (number / BASE_DEVICE_WIDTH) * (newDeviceWidth || deviceWidth);\r\n  if (result < 0) {\r\n    result = -result;\r\n  }\r\n  result = Math.floor(result + EPS);\r\n  if (result === 0) {\r\n    if (deviceDPR === 1 || !isIOS) {\r\n      result = 1;\r\n    } else {\r\n      result = 0.5;\r\n    }\r\n  }\r\n  return number < 0 ? -result : result\r\n}\r\n\r\nconst interceptors = {\r\n  promiseInterceptor\r\n};\r\n\r\nvar baseApi = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  upx2px: upx2px,\r\n  addInterceptor: addInterceptor,\r\n  removeInterceptor: removeInterceptor,\r\n  interceptors: interceptors\r\n});\r\n\r\nfunction findExistsPageIndex (url) {\r\n  const pages = getCurrentPages();\r\n  let len = pages.length;\r\n  while (len--) {\r\n    const page = pages[len];\r\n    if (page.$page && page.$page.fullPath === url) {\r\n      return len\r\n    }\r\n  }\r\n  return -1\r\n}\r\n\r\nvar redirectTo = {\r\n  name (fromArgs) {\r\n    if (fromArgs.exists === 'back' && fromArgs.delta) {\r\n      return 'navigateBack'\r\n    }\r\n    return 'redirectTo'\r\n  },\r\n  args (fromArgs) {\r\n    if (fromArgs.exists === 'back' && fromArgs.url) {\r\n      const existsPageIndex = findExistsPageIndex(fromArgs.url);\r\n      if (existsPageIndex !== -1) {\r\n        const delta = getCurrentPages().length - 1 - existsPageIndex;\r\n        if (delta > 0) {\r\n          fromArgs.delta = delta;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar previewImage = {\r\n  args (fromArgs) {\r\n    let currentIndex = parseInt(fromArgs.current);\r\n    if (isNaN(currentIndex)) {\r\n      return\r\n    }\r\n    const urls = fromArgs.urls;\r\n    if (!Array.isArray(urls)) {\r\n      return\r\n    }\r\n    const len = urls.length;\r\n    if (!len) {\r\n      return\r\n    }\r\n    if (currentIndex < 0) {\r\n      currentIndex = 0;\r\n    } else if (currentIndex >= len) {\r\n      currentIndex = len - 1;\r\n    }\r\n    if (currentIndex > 0) {\r\n      fromArgs.current = urls[currentIndex];\r\n      fromArgs.urls = urls.filter(\r\n        (item, index) => index < currentIndex ? item !== urls[currentIndex] : true\r\n      );\r\n    } else {\r\n      fromArgs.current = urls[0];\r\n    }\r\n    return {\r\n      indicator: false,\r\n      loop: false\r\n    }\r\n  }\r\n};\r\n\r\nconst UUID_KEY = '__DC_STAT_UUID';\r\nlet deviceId;\r\nfunction addUuid (result) {\r\n  deviceId = deviceId || wx.getStorageSync(UUID_KEY);\r\n  if (!deviceId) {\r\n    deviceId = Date.now() + '' + Math.floor(Math.random() * 1e7);\r\n    wx.setStorage({\r\n      key: UUID_KEY,\r\n      data: deviceId\r\n    });\r\n  }\r\n  result.deviceId = deviceId;\r\n}\r\n\r\nfunction addSafeAreaInsets (result) {\r\n  if (result.safeArea) {\r\n    const safeArea = result.safeArea;\r\n    result.safeAreaInsets = {\r\n      top: safeArea.top,\r\n      left: safeArea.left,\r\n      right: result.windowWidth - safeArea.right,\r\n      bottom: result.windowHeight - safeArea.bottom\r\n    };\r\n  }\r\n}\r\n\r\nvar getSystemInfo = {\r\n  returnValue: function (result) {\r\n    addUuid(result);\r\n    addSafeAreaInsets(result);\r\n  }\r\n};\r\n\r\n// import navigateTo from 'uni-helpers/navigate-to'\r\n\r\nconst protocols = {\r\n  redirectTo,\r\n  // navigateTo,  // 由于在微信开发者工具的页面参数，会显示__id__参数，因此暂时关闭mp-weixin对于navigateTo的AOP\r\n  previewImage,\r\n  getSystemInfo,\r\n  getSystemInfoSync: getSystemInfo\r\n};\r\nconst todos = [\r\n  'vibrate',\r\n  'preloadPage',\r\n  'unPreloadPage',\r\n  'loadSubPackage'\r\n];\r\nconst canIUses = [];\r\n\r\nconst CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\r\n\r\nfunction processCallback (methodName, method, returnValue) {\r\n  return function (res) {\r\n    return method(processReturnValue(methodName, res, returnValue))\r\n  }\r\n}\r\n\r\nfunction processArgs (methodName, fromArgs, argsOption = {}, returnValue = {}, keepFromArgs = false) {\r\n  if (isPlainObject(fromArgs)) { // 一般 api 的参数解析\r\n    const toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\r\n    if (isFn(argsOption)) {\r\n      argsOption = argsOption(fromArgs, toArgs) || {};\r\n    }\r\n    for (const key in fromArgs) {\r\n      if (hasOwn(argsOption, key)) {\r\n        let keyOption = argsOption[key];\r\n        if (isFn(keyOption)) {\r\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\r\n        }\r\n        if (!keyOption) { // 不支持的参数\r\n          console.warn(`The '${methodName}' method of platform '微信小程序' does not support option '${key}'`);\r\n        } else if (isStr(keyOption)) { // 重写参数 key\r\n          toArgs[keyOption] = fromArgs[key];\r\n        } else if (isPlainObject(keyOption)) { // {name:newName,value:value}可重新指定参数 key:value\r\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\r\n        }\r\n      } else if (CALLBACKS.indexOf(key) !== -1) {\r\n        if (isFn(fromArgs[key])) {\r\n          toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\r\n        }\r\n      } else {\r\n        if (!keepFromArgs) {\r\n          toArgs[key] = fromArgs[key];\r\n        }\r\n      }\r\n    }\r\n    return toArgs\r\n  } else if (isFn(fromArgs)) {\r\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\r\n  }\r\n  return fromArgs\r\n}\r\n\r\nfunction processReturnValue (methodName, res, returnValue, keepReturnValue = false) {\r\n  if (isFn(protocols.returnValue)) { // 处理通用 returnValue\r\n    res = protocols.returnValue(methodName, res);\r\n  }\r\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue)\r\n}\r\n\r\nfunction wrapper (methodName, method) {\r\n  if (hasOwn(protocols, methodName)) {\r\n    const protocol = protocols[methodName];\r\n    if (!protocol) { // 暂不支持的 api\r\n      return function () {\r\n        console.error(`Platform '微信小程序' does not support '${methodName}'.`);\r\n      }\r\n    }\r\n    return function (arg1, arg2) { // 目前 api 最多两个参数\r\n      let options = protocol;\r\n      if (isFn(protocol)) {\r\n        options = protocol(arg1);\r\n      }\r\n\r\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\r\n\r\n      const args = [arg1];\r\n      if (typeof arg2 !== 'undefined') {\r\n        args.push(arg2);\r\n      }\r\n      if (isFn(options.name)) {\r\n        methodName = options.name(arg1);\r\n      } else if (isStr(options.name)) {\r\n        methodName = options.name;\r\n      }\r\n      const returnValue = wx[methodName].apply(wx, args);\r\n      if (isSyncApi(methodName)) { // 同步 api\r\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName))\r\n      }\r\n      return returnValue\r\n    }\r\n  }\r\n  return method\r\n}\r\n\r\nconst todoApis = Object.create(null);\r\n\r\nconst TODOS = [\r\n  'onTabBarMidButtonTap',\r\n  'subscribePush',\r\n  'unsubscribePush',\r\n  'onPush',\r\n  'offPush',\r\n  'share'\r\n];\r\n\r\nfunction createTodoApi (name) {\r\n  return function todoApi ({\r\n    fail,\r\n    complete\r\n  }) {\r\n    const res = {\r\n      errMsg: `${name}:fail method '${name}' not supported`\r\n    };\r\n    isFn(fail) && fail(res);\r\n    isFn(complete) && complete(res);\r\n  }\r\n}\r\n\r\nTODOS.forEach(function (name) {\r\n  todoApis[name] = createTodoApi(name);\r\n});\r\n\r\nvar providers = {\r\n  oauth: ['weixin'],\r\n  share: ['weixin'],\r\n  payment: ['wxpay'],\r\n  push: ['weixin']\r\n};\r\n\r\nfunction getProvider ({\r\n  service,\r\n  success,\r\n  fail,\r\n  complete\r\n}) {\r\n  let res = false;\r\n  if (providers[service]) {\r\n    res = {\r\n      errMsg: 'getProvider:ok',\r\n      service,\r\n      provider: providers[service]\r\n    };\r\n    isFn(success) && success(res);\r\n  } else {\r\n    res = {\r\n      errMsg: 'getProvider:fail service not found'\r\n    };\r\n    isFn(fail) && fail(res);\r\n  }\r\n  isFn(complete) && complete(res);\r\n}\r\n\r\nvar extraApi = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  getProvider: getProvider\r\n});\r\n\r\nconst getEmitter = (function () {\r\n  let Emitter;\r\n  return function getUniEmitter () {\r\n    if (!Emitter) {\r\n      Emitter = new Vue();\r\n    }\r\n    return Emitter\r\n  }\r\n})();\r\n\r\nfunction apply (ctx, method, args) {\r\n  return ctx[method].apply(ctx, args)\r\n}\r\n\r\nfunction $on () {\r\n  return apply(getEmitter(), '$on', [...arguments])\r\n}\r\nfunction $off () {\r\n  return apply(getEmitter(), '$off', [...arguments])\r\n}\r\nfunction $once () {\r\n  return apply(getEmitter(), '$once', [...arguments])\r\n}\r\nfunction $emit () {\r\n  return apply(getEmitter(), '$emit', [...arguments])\r\n}\r\n\r\nvar eventApi = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  $on: $on,\r\n  $off: $off,\r\n  $once: $once,\r\n  $emit: $emit\r\n});\r\n\r\nvar api = /*#__PURE__*/Object.freeze({\r\n  __proto__: null\r\n});\r\n\r\nconst MPPage = Page;\r\nconst MPComponent = Component;\r\n\r\nconst customizeRE = /:/g;\r\n\r\nconst customize = cached((str) => {\r\n  return camelize(str.replace(customizeRE, '-'))\r\n});\r\n\r\nfunction initTriggerEvent (mpInstance) {\r\n  {\r\n    if (!wx.canIUse || !wx.canIUse('nextTick')) {\r\n      return\r\n    }\r\n  }\r\n  const oldTriggerEvent = mpInstance.triggerEvent;\r\n  mpInstance.triggerEvent = function (event, ...args) {\r\n    return oldTriggerEvent.apply(mpInstance, [customize(event), ...args])\r\n  };\r\n}\r\n\r\nfunction initHook (name, options) {\r\n  const oldHook = options[name];\r\n  if (!oldHook) {\r\n    options[name] = function () {\r\n      initTriggerEvent(this);\r\n    };\r\n  } else {\r\n    options[name] = function (...args) {\r\n      initTriggerEvent(this);\r\n      return oldHook.apply(this, args)\r\n    };\r\n  }\r\n}\r\nif (!MPPage.__$wrappered) {\r\n  MPPage.__$wrappered = true;\r\n  Page = function (options = {}) {\r\n    initHook('onLoad', options);\r\n    return MPPage(options)\r\n  };\r\n  Page.after = MPPage.after;\r\n\r\n  Component = function (options = {}) {\r\n    initHook('created', options);\r\n    return MPComponent(options)\r\n  };\r\n}\r\n\r\nconst PAGE_EVENT_HOOKS = [\r\n  'onPullDownRefresh',\r\n  'onReachBottom',\r\n  'onAddToFavorites',\r\n  'onShareTimeline',\r\n  'onShareAppMessage',\r\n  'onPageScroll',\r\n  'onResize',\r\n  'onTabItemTap'\r\n];\r\n\r\nfunction initMocks (vm, mocks) {\r\n  const mpInstance = vm.$mp[vm.mpType];\r\n  mocks.forEach(mock => {\r\n    if (hasOwn(mpInstance, mock)) {\r\n      vm[mock] = mpInstance[mock];\r\n    }\r\n  });\r\n}\r\n\r\nfunction hasHook (hook, vueOptions) {\r\n  if (!vueOptions) {\r\n    return true\r\n  }\r\n\r\n  if (Vue.options && Array.isArray(Vue.options[hook])) {\r\n    return true\r\n  }\r\n\r\n  vueOptions = vueOptions.default || vueOptions;\r\n\r\n  if (isFn(vueOptions)) {\r\n    if (isFn(vueOptions.extendOptions[hook])) {\r\n      return true\r\n    }\r\n    if (vueOptions.super &&\r\n      vueOptions.super.options &&\r\n      Array.isArray(vueOptions.super.options[hook])) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  if (isFn(vueOptions[hook])) {\r\n    return true\r\n  }\r\n  const mixins = vueOptions.mixins;\r\n  if (Array.isArray(mixins)) {\r\n    return !!mixins.find(mixin => hasHook(hook, mixin))\r\n  }\r\n}\r\n\r\nfunction initHooks (mpOptions, hooks, vueOptions) {\r\n  hooks.forEach(hook => {\r\n    if (hasHook(hook, vueOptions)) {\r\n      mpOptions[hook] = function (args) {\r\n        return this.$vm && this.$vm.__call_hook(hook, args)\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction initVueComponent (Vue, vueOptions) {\r\n  vueOptions = vueOptions.default || vueOptions;\r\n  let VueComponent;\r\n  if (isFn(vueOptions)) {\r\n    VueComponent = vueOptions;\r\n  } else {\r\n    VueComponent = Vue.extend(vueOptions);\r\n  }\r\n  vueOptions = VueComponent.options;\r\n  return [VueComponent, vueOptions]\r\n}\r\n\r\nfunction initSlots (vm, vueSlots) {\r\n  if (Array.isArray(vueSlots) && vueSlots.length) {\r\n    const $slots = Object.create(null);\r\n    vueSlots.forEach(slotName => {\r\n      $slots[slotName] = true;\r\n    });\r\n    vm.$scopedSlots = vm.$slots = $slots;\r\n  }\r\n}\r\n\r\nfunction initVueIds (vueIds, mpInstance) {\r\n  vueIds = (vueIds || '').split(',');\r\n  const len = vueIds.length;\r\n\r\n  if (len === 1) {\r\n    mpInstance._$vueId = vueIds[0];\r\n  } else if (len === 2) {\r\n    mpInstance._$vueId = vueIds[0];\r\n    mpInstance._$vuePid = vueIds[1];\r\n  }\r\n}\r\n\r\nfunction initData (vueOptions, context) {\r\n  let data = vueOptions.data || {};\r\n  const methods = vueOptions.methods || {};\r\n\r\n  if (typeof data === 'function') {\r\n    try {\r\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\r\n    } catch (e) {\r\n      if (process.env.VUE_APP_DEBUG) {\r\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\r\n      }\r\n    }\r\n  } else {\r\n    try {\r\n      // 对 data 格式化\r\n      data = JSON.parse(JSON.stringify(data));\r\n    } catch (e) {}\r\n  }\r\n\r\n  if (!isPlainObject(data)) {\r\n    data = {};\r\n  }\r\n\r\n  Object.keys(methods).forEach(methodName => {\r\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\r\n      data[methodName] = methods[methodName];\r\n    }\r\n  });\r\n\r\n  return data\r\n}\r\n\r\nconst PROP_TYPES = [String, Number, Boolean, Object, Array, null];\r\n\r\nfunction createObserver (name) {\r\n  return function observer (newVal, oldVal) {\r\n    if (this.$vm) {\r\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\r\n    }\r\n  }\r\n}\r\n\r\nfunction initBehaviors (vueOptions, initBehavior) {\r\n  const vueBehaviors = vueOptions.behaviors;\r\n  const vueExtends = vueOptions.extends;\r\n  const vueMixins = vueOptions.mixins;\r\n\r\n  let vueProps = vueOptions.props;\r\n\r\n  if (!vueProps) {\r\n    vueOptions.props = vueProps = [];\r\n  }\r\n\r\n  const behaviors = [];\r\n  if (Array.isArray(vueBehaviors)) {\r\n    vueBehaviors.forEach(behavior => {\r\n      behaviors.push(behavior.replace('uni://', `${\"wx\"}://`));\r\n      if (behavior === 'uni://form-field') {\r\n        if (Array.isArray(vueProps)) {\r\n          vueProps.push('name');\r\n          vueProps.push('value');\r\n        } else {\r\n          vueProps.name = {\r\n            type: String,\r\n            default: ''\r\n          };\r\n          vueProps.value = {\r\n            type: [String, Number, Boolean, Array, Object, Date],\r\n            default: ''\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n  if (isPlainObject(vueExtends) && vueExtends.props) {\r\n    behaviors.push(\r\n      initBehavior({\r\n        properties: initProperties(vueExtends.props, true)\r\n      })\r\n    );\r\n  }\r\n  if (Array.isArray(vueMixins)) {\r\n    vueMixins.forEach(vueMixin => {\r\n      if (isPlainObject(vueMixin) && vueMixin.props) {\r\n        behaviors.push(\r\n          initBehavior({\r\n            properties: initProperties(vueMixin.props, true)\r\n          })\r\n        );\r\n      }\r\n    });\r\n  }\r\n  return behaviors\r\n}\r\n\r\nfunction parsePropType (key, type, defaultValue, file) {\r\n  // [String]=>String\r\n  if (Array.isArray(type) && type.length === 1) {\r\n    return type[0]\r\n  }\r\n  return type\r\n}\r\n\r\nfunction initProperties (props, isBehavior = false, file = '') {\r\n  const properties = {};\r\n  if (!isBehavior) {\r\n    properties.vueId = {\r\n      type: String,\r\n      value: ''\r\n    };\r\n    // 用于字节跳动小程序模拟抽象节点\r\n    properties.generic = {\r\n      type: Object,\r\n      value: null\r\n    };\r\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\r\n      type: null,\r\n      value: [],\r\n      observer: function (newVal, oldVal) {\r\n        const $slots = Object.create(null);\r\n        newVal.forEach(slotName => {\r\n          $slots[slotName] = true;\r\n        });\r\n        this.setData({\r\n          $slots\r\n        });\r\n      }\r\n    };\r\n  }\r\n  if (Array.isArray(props)) { // ['title']\r\n    props.forEach(key => {\r\n      properties[key] = {\r\n        type: null,\r\n        observer: createObserver(key)\r\n      };\r\n    });\r\n  } else if (isPlainObject(props)) { // {title:{type:String,default:''},content:String}\r\n    Object.keys(props).forEach(key => {\r\n      const opts = props[key];\r\n      if (isPlainObject(opts)) { // title:{type:String,default:''}\r\n        let value = opts.default;\r\n        if (isFn(value)) {\r\n          value = value();\r\n        }\r\n\r\n        opts.type = parsePropType(key, opts.type);\r\n\r\n        properties[key] = {\r\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\r\n          value,\r\n          observer: createObserver(key)\r\n        };\r\n      } else { // content:String\r\n        const type = parsePropType(key, opts);\r\n        properties[key] = {\r\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\r\n          observer: createObserver(key)\r\n        };\r\n      }\r\n    });\r\n  }\r\n  return properties\r\n}\r\n\r\nfunction wrapper$1 (event) {\r\n  // TODO 又得兼容 mpvue 的 mp 对象\r\n  try {\r\n    event.mp = JSON.parse(JSON.stringify(event));\r\n  } catch (e) {}\r\n\r\n  event.stopPropagation = noop;\r\n  event.preventDefault = noop;\r\n\r\n  event.target = event.target || {};\r\n\r\n  if (!hasOwn(event, 'detail')) {\r\n    event.detail = {};\r\n  }\r\n\r\n  if (hasOwn(event, 'markerId')) {\r\n    event.detail = typeof event.detail === 'object' ? event.detail : {};\r\n    event.detail.markerId = event.markerId;\r\n  }\r\n\r\n  if (isPlainObject(event.detail)) {\r\n    event.target = Object.assign({}, event.target, event.detail);\r\n  }\r\n\r\n  return event\r\n}\r\n\r\nfunction getExtraValue (vm, dataPathsArray) {\r\n  let context = vm;\r\n  dataPathsArray.forEach(dataPathArray => {\r\n    const dataPath = dataPathArray[0];\r\n    const value = dataPathArray[2];\r\n    if (dataPath || typeof value !== 'undefined') { // ['','',index,'disable']\r\n      const propPath = dataPathArray[1];\r\n      const valuePath = dataPathArray[3];\r\n\r\n      let vFor;\r\n      if (Number.isInteger(dataPath)) {\r\n        vFor = dataPath;\r\n      } else if (!dataPath) {\r\n        vFor = context;\r\n      } else if (typeof dataPath === 'string' && dataPath) {\r\n        if (dataPath.indexOf('#s#') === 0) {\r\n          vFor = dataPath.substr(3);\r\n        } else {\r\n          vFor = vm.__get_value(dataPath, context);\r\n        }\r\n      }\r\n\r\n      if (Number.isInteger(vFor)) {\r\n        context = value;\r\n      } else if (!propPath) {\r\n        context = vFor[value];\r\n      } else {\r\n        if (Array.isArray(vFor)) {\r\n          context = vFor.find(vForItem => {\r\n            return vm.__get_value(propPath, vForItem) === value\r\n          });\r\n        } else if (isPlainObject(vFor)) {\r\n          context = Object.keys(vFor).find(vForKey => {\r\n            return vm.__get_value(propPath, vFor[vForKey]) === value\r\n          });\r\n        } else {\r\n          console.error('v-for 暂不支持循环数据：', vFor);\r\n        }\r\n      }\r\n\r\n      if (valuePath) {\r\n        context = vm.__get_value(valuePath, context);\r\n      }\r\n    }\r\n  });\r\n  return context\r\n}\r\n\r\nfunction processEventExtra (vm, extra, event) {\r\n  const extraObj = {};\r\n\r\n  if (Array.isArray(extra) && extra.length) {\r\n    /**\r\n     *[\r\n     *    ['data.items', 'data.id', item.data.id],\r\n     *    ['metas', 'id', meta.id]\r\n     *],\r\n     *[\r\n     *    ['data.items', 'data.id', item.data.id],\r\n     *    ['metas', 'id', meta.id]\r\n     *],\r\n     *'test'\r\n     */\r\n    extra.forEach((dataPath, index) => {\r\n      if (typeof dataPath === 'string') {\r\n        if (!dataPath) { // model,prop.sync\r\n          extraObj['$' + index] = vm;\r\n        } else {\r\n          if (dataPath === '$event') { // $event\r\n            extraObj['$' + index] = event;\r\n          } else if (dataPath === 'arguments') {\r\n            if (event.detail && event.detail.__args__) {\r\n              extraObj['$' + index] = event.detail.__args__;\r\n            } else {\r\n              extraObj['$' + index] = [event];\r\n            }\r\n          } else if (dataPath.indexOf('$event.') === 0) { // $event.target.value\r\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\r\n          } else {\r\n            extraObj['$' + index] = vm.__get_value(dataPath);\r\n          }\r\n        }\r\n      } else {\r\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\r\n      }\r\n    });\r\n  }\r\n\r\n  return extraObj\r\n}\r\n\r\nfunction getObjByArray (arr) {\r\n  const obj = {};\r\n  for (let i = 1; i < arr.length; i++) {\r\n    const element = arr[i];\r\n    obj[element[0]] = element[1];\r\n  }\r\n  return obj\r\n}\r\n\r\nfunction processEventArgs (vm, event, args = [], extra = [], isCustom, methodName) {\r\n  let isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\r\n  if (isCustom) { // 自定义事件\r\n    isCustomMPEvent = event.currentTarget &&\r\n      event.currentTarget.dataset &&\r\n      event.currentTarget.dataset.comType === 'wx';\r\n    if (!args.length) { // 无参数，直接传入 event 或 detail 数组\r\n      if (isCustomMPEvent) {\r\n        return [event]\r\n      }\r\n      return event.detail.__args__ || event.detail\r\n    }\r\n  }\r\n\r\n  const extraObj = processEventExtra(vm, extra, event);\r\n\r\n  const ret = [];\r\n  args.forEach(arg => {\r\n    if (arg === '$event') {\r\n      if (methodName === '__set_model' && !isCustom) { // input v-model value\r\n        ret.push(event.target.value);\r\n      } else {\r\n        if (isCustom && !isCustomMPEvent) {\r\n          ret.push(event.detail.__args__[0]);\r\n        } else { // wxcomponent 组件或内置组件\r\n          ret.push(event);\r\n        }\r\n      }\r\n    } else {\r\n      if (Array.isArray(arg) && arg[0] === 'o') {\r\n        ret.push(getObjByArray(arg));\r\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\r\n        ret.push(extraObj[arg]);\r\n      } else {\r\n        ret.push(arg);\r\n      }\r\n    }\r\n  });\r\n\r\n  return ret\r\n}\r\n\r\nconst ONCE = '~';\r\nconst CUSTOM = '^';\r\n\r\nfunction isMatchEventType (eventType, optType) {\r\n  return (eventType === optType) ||\r\n    (\r\n      optType === 'regionchange' &&\r\n      (\r\n        eventType === 'begin' ||\r\n        eventType === 'end'\r\n      )\r\n    )\r\n}\r\n\r\nfunction getContextVm (vm) {\r\n  let $parent = vm.$parent;\r\n  // 父组件是 scoped slots 或者其他自定义组件时继续查找\r\n  while ($parent && $parent.$parent && ($parent.$options.generic || $parent.$parent.$options.generic || $parent.$scope._$vuePid)) {\r\n    $parent = $parent.$parent;\r\n  }\r\n  return $parent && $parent.$parent\r\n}\r\n\r\nfunction handleEvent (event) {\r\n  event = wrapper$1(event);\r\n\r\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\r\n  const dataset = (event.currentTarget || event.target).dataset;\r\n  if (!dataset) {\r\n    return console.warn('事件信息不存在')\r\n  }\r\n  const eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\r\n  if (!eventOpts) {\r\n    return console.warn('事件信息不存在')\r\n  }\r\n\r\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\r\n  const eventType = event.type;\r\n\r\n  const ret = [];\r\n\r\n  eventOpts.forEach(eventOpt => {\r\n    let type = eventOpt[0];\r\n    const eventsArray = eventOpt[1];\r\n\r\n    const isCustom = type.charAt(0) === CUSTOM;\r\n    type = isCustom ? type.slice(1) : type;\r\n    const isOnce = type.charAt(0) === ONCE;\r\n    type = isOnce ? type.slice(1) : type;\r\n\r\n    if (eventsArray && isMatchEventType(eventType, type)) {\r\n      eventsArray.forEach(eventArray => {\r\n        const methodName = eventArray[0];\r\n        if (methodName) {\r\n          let handlerCtx = this.$vm;\r\n          if (handlerCtx.$options.generic) { // mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\r\n            handlerCtx = getContextVm(handlerCtx) || handlerCtx;\r\n          }\r\n          if (methodName === '$emit') {\r\n            handlerCtx.$emit.apply(handlerCtx,\r\n              processEventArgs(\r\n                this.$vm,\r\n                event,\r\n                eventArray[1],\r\n                eventArray[2],\r\n                isCustom,\r\n                methodName\r\n              ));\r\n            return\r\n          }\r\n          const handler = handlerCtx[methodName];\r\n          if (!isFn(handler)) {\r\n            throw new Error(` _vm.${methodName} is not a function`)\r\n          }\r\n          if (isOnce) {\r\n            if (handler.once) {\r\n              return\r\n            }\r\n            handler.once = true;\r\n          }\r\n          let params = processEventArgs(\r\n            this.$vm,\r\n            event,\r\n            eventArray[1],\r\n            eventArray[2],\r\n            isCustom,\r\n            methodName\r\n          );\r\n          params = Array.isArray(params) ? params : [];\r\n          // 参数尾部增加原始事件对象用于复杂表达式内获取额外数据\r\n          if (/=\\s*\\S+\\.eventParams\\s*\\|\\|\\s*\\S+\\[['\"]event-params['\"]\\]/.test(handler.toString())) {\r\n            // eslint-disable-next-line no-sparse-arrays\r\n            params = params.concat([, , , , , , , , , , event]);\r\n          }\r\n          ret.push(handler.apply(handlerCtx, params));\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  if (\r\n    eventType === 'input' &&\r\n    ret.length === 1 &&\r\n    typeof ret[0] !== 'undefined'\r\n  ) {\r\n    return ret[0]\r\n  }\r\n}\r\n\r\nconst eventChannels = {};\r\n\r\nconst eventChannelStack = [];\r\n\r\nfunction getEventChannel (id) {\r\n  if (id) {\r\n    const eventChannel = eventChannels[id];\r\n    delete eventChannels[id];\r\n    return eventChannel\r\n  }\r\n  return eventChannelStack.shift()\r\n}\r\n\r\nconst hooks = [\r\n  'onShow',\r\n  'onHide',\r\n  'onError',\r\n  'onPageNotFound',\r\n  'onThemeChange',\r\n  'onUnhandledRejection'\r\n];\r\n\r\nfunction initEventChannel () {\r\n  Vue.prototype.getOpenerEventChannel = function () {\r\n    // 微信小程序使用自身getOpenerEventChannel\r\n    {\r\n      return this.$scope.getOpenerEventChannel()\r\n    }\r\n  };\r\n  const callHook = Vue.prototype.__call_hook;\r\n  Vue.prototype.__call_hook = function (hook, args) {\r\n    if (hook === 'onLoad' && args && args.__id__) {\r\n      this.__eventChannel__ = getEventChannel(args.__id__);\r\n      delete args.__id__;\r\n    }\r\n    return callHook.call(this, hook, args)\r\n  };\r\n}\r\n\r\nfunction initScopedSlotsParams () {\r\n  const center = {};\r\n  const parents = {};\r\n\r\n  Vue.prototype.$hasScopedSlotsParams = function (vueId) {\r\n    const has = center[vueId];\r\n    if (!has) {\r\n      parents[vueId] = this;\r\n      this.$on('hook:destory', () => {\r\n        delete parents[vueId];\r\n      });\r\n    }\r\n    return has\r\n  };\r\n\r\n  Vue.prototype.$getScopedSlotsParams = function (vueId, name, key) {\r\n    const data = center[vueId];\r\n    if (data) {\r\n      const object = data[name] || {};\r\n      return key ? object[key] : object\r\n    } else {\r\n      parents[vueId] = this;\r\n      this.$on('hook:destory', () => {\r\n        delete parents[vueId];\r\n      });\r\n    }\r\n  };\r\n\r\n  Vue.prototype.$setScopedSlotsParams = function (name, value) {\r\n    const vueId = this.$options.propsData.vueId;\r\n    const object = center[vueId] = center[vueId] || {};\r\n    object[name] = value;\r\n    if (parents[vueId]) {\r\n      parents[vueId].$forceUpdate();\r\n    }\r\n  };\r\n\r\n  Vue.mixin({\r\n    destroyed () {\r\n      const propsData = this.$options.propsData;\r\n      const vueId = propsData && propsData.vueId;\r\n      if (vueId) {\r\n        delete center[vueId];\r\n        delete parents[vueId];\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction parseBaseApp (vm, {\r\n  mocks,\r\n  initRefs\r\n}) {\r\n  initEventChannel();\r\n  {\r\n    initScopedSlotsParams();\r\n  }\r\n  if (vm.$options.store) {\r\n    Vue.prototype.$store = vm.$options.store;\r\n  }\r\n  uniIdMixin(Vue);\r\n\r\n  Vue.prototype.mpHost = \"mp-weixin\";\r\n\r\n  Vue.mixin({\r\n    beforeCreate () {\r\n      if (!this.$options.mpType) {\r\n        return\r\n      }\r\n\r\n      this.mpType = this.$options.mpType;\r\n\r\n      this.$mp = {\r\n        data: {},\r\n        [this.mpType]: this.$options.mpInstance\r\n      };\r\n\r\n      this.$scope = this.$options.mpInstance;\r\n\r\n      delete this.$options.mpType;\r\n      delete this.$options.mpInstance;\r\n      if (this.mpType === 'page' && typeof getApp === 'function') { // hack vue-i18n\r\n        const app = getApp();\r\n        if (app.$vm && app.$vm.$i18n) {\r\n          this._i18n = app.$vm.$i18n;\r\n        }\r\n      }\r\n      if (this.mpType !== 'app') {\r\n        initRefs(this);\r\n        initMocks(this, mocks);\r\n      }\r\n    }\r\n  });\r\n\r\n  const appOptions = {\r\n    onLaunch (args) {\r\n      if (this.$vm) { // 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\r\n        return\r\n      }\r\n      {\r\n        if (wx.canIUse && !wx.canIUse('nextTick')) { // 事实 上2.2.3 即可，简单使用 2.3.0 的 nextTick 判断\r\n          console.error('当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上');\r\n        }\r\n      }\r\n\r\n      this.$vm = vm;\r\n\r\n      this.$vm.$mp = {\r\n        app: this\r\n      };\r\n\r\n      this.$vm.$scope = this;\r\n      // vm 上也挂载 globalData\r\n      this.$vm.globalData = this.globalData;\r\n\r\n      this.$vm._isMounted = true;\r\n      this.$vm.__call_hook('mounted', args);\r\n\r\n      this.$vm.__call_hook('onLaunch', args);\r\n    }\r\n  };\r\n\r\n  // 兼容旧版本 globalData\r\n  appOptions.globalData = vm.$options.globalData || {};\r\n  // 将 methods 中的方法挂在 getApp() 中\r\n  const methods = vm.$options.methods;\r\n  if (methods) {\r\n    Object.keys(methods).forEach(name => {\r\n      appOptions[name] = methods[name];\r\n    });\r\n  }\r\n\r\n  initHooks(appOptions, hooks);\r\n\r\n  return appOptions\r\n}\r\n\r\nconst mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\r\n\r\nfunction findVmByVueId (vm, vuePid) {\r\n  const $children = vm.$children;\r\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\r\n  for (let i = $children.length - 1; i >= 0; i--) {\r\n    const childVm = $children[i];\r\n    if (childVm.$scope._$vueId === vuePid) {\r\n      return childVm\r\n    }\r\n  }\r\n  // 反向递归查找\r\n  let parentVm;\r\n  for (let i = $children.length - 1; i >= 0; i--) {\r\n    parentVm = findVmByVueId($children[i], vuePid);\r\n    if (parentVm) {\r\n      return parentVm\r\n    }\r\n  }\r\n}\r\n\r\nfunction initBehavior (options) {\r\n  return Behavior(options)\r\n}\r\n\r\nfunction isPage () {\r\n  return !!this.route\r\n}\r\n\r\nfunction initRelation (detail) {\r\n  this.triggerEvent('__l', detail);\r\n}\r\n\r\nfunction selectAllComponents (mpInstance, selector, $refs) {\r\n  const components = mpInstance.selectAllComponents(selector);\r\n  components.forEach(component => {\r\n    const ref = component.dataset.ref;\r\n    $refs[ref] = component.$vm || component;\r\n    {\r\n      if (component.dataset.vueGeneric === 'scoped') {\r\n        component.selectAllComponents('.scoped-ref').forEach(scopedComponent => {\r\n          selectAllComponents(scopedComponent, selector, $refs);\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction initRefs (vm) {\r\n  const mpInstance = vm.$scope;\r\n  Object.defineProperty(vm, '$refs', {\r\n    get () {\r\n      const $refs = {};\r\n      selectAllComponents(mpInstance, '.vue-ref', $refs);\r\n      // TODO 暂不考虑 for 中的 scoped\r\n      const forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\r\n      forComponents.forEach(component => {\r\n        const ref = component.dataset.ref;\r\n        if (!$refs[ref]) {\r\n          $refs[ref] = [];\r\n        }\r\n        $refs[ref].push(component.$vm || component);\r\n      });\r\n      return $refs\r\n    }\r\n  });\r\n}\r\n\r\nfunction handleLink (event) {\r\n  const {\r\n    vuePid,\r\n    vueOptions\r\n  } = event.detail || event.value; // detail 是微信,value 是百度(dipatch)\r\n\r\n  let parentVm;\r\n\r\n  if (vuePid) {\r\n    parentVm = findVmByVueId(this.$vm, vuePid);\r\n  }\r\n\r\n  if (!parentVm) {\r\n    parentVm = this.$vm;\r\n  }\r\n\r\n  vueOptions.parent = parentVm;\r\n}\r\n\r\nfunction parseApp (vm) {\r\n  return parseBaseApp(vm, {\r\n    mocks,\r\n    initRefs\r\n  })\r\n}\r\n\r\nfunction createApp (vm) {\r\n  App(parseApp(vm));\r\n  return vm\r\n}\r\n\r\nconst encodeReserveRE = /[!'()*]/g;\r\nconst encodeReserveReplacer = c => '%' + c.charCodeAt(0).toString(16);\r\nconst commaRE = /%2C/g;\r\n\r\n// fixed encodeURIComponent which is more conformant to RFC3986:\r\n// - escapes [!'()*]\r\n// - preserve commas\r\nconst encode = str => encodeURIComponent(str)\r\n  .replace(encodeReserveRE, encodeReserveReplacer)\r\n  .replace(commaRE, ',');\r\n\r\nfunction stringifyQuery (obj, encodeStr = encode) {\r\n  const res = obj ? Object.keys(obj).map(key => {\r\n    const val = obj[key];\r\n\r\n    if (val === undefined) {\r\n      return ''\r\n    }\r\n\r\n    if (val === null) {\r\n      return encodeStr(key)\r\n    }\r\n\r\n    if (Array.isArray(val)) {\r\n      const result = [];\r\n      val.forEach(val2 => {\r\n        if (val2 === undefined) {\r\n          return\r\n        }\r\n        if (val2 === null) {\r\n          result.push(encodeStr(key));\r\n        } else {\r\n          result.push(encodeStr(key) + '=' + encodeStr(val2));\r\n        }\r\n      });\r\n      return result.join('&')\r\n    }\r\n\r\n    return encodeStr(key) + '=' + encodeStr(val)\r\n  }).filter(x => x.length > 0).join('&') : null;\r\n  return res ? `?${res}` : ''\r\n}\r\n\r\nfunction parseBaseComponent (vueComponentOptions, {\r\n  isPage,\r\n  initRelation\r\n} = {}) {\r\n  const [VueComponent, vueOptions] = initVueComponent(Vue, vueComponentOptions);\r\n\r\n  const options = {\r\n    multipleSlots: true,\r\n    addGlobalClass: true,\r\n    ...(vueOptions.options || {})\r\n  };\r\n\r\n  {\r\n    // 微信 multipleSlots 部分情况有 bug，导致内容顺序错乱 如 u-list，提供覆盖选项\r\n    if (vueOptions['mp-weixin'] && vueOptions['mp-weixin'].options) {\r\n      Object.assign(options, vueOptions['mp-weixin'].options);\r\n    }\r\n  }\r\n\r\n  const componentOptions = {\r\n    options,\r\n    data: initData(vueOptions, Vue.prototype),\r\n    behaviors: initBehaviors(vueOptions, initBehavior),\r\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\r\n    lifetimes: {\r\n      attached () {\r\n        const properties = this.properties;\r\n\r\n        const options = {\r\n          mpType: isPage.call(this) ? 'page' : 'component',\r\n          mpInstance: this,\r\n          propsData: properties\r\n        };\r\n\r\n        initVueIds(properties.vueId, this);\r\n\r\n        // 处理父子关系\r\n        initRelation.call(this, {\r\n          vuePid: this._$vuePid,\r\n          vueOptions: options\r\n        });\r\n\r\n        // 初始化 vue 实例\r\n        this.$vm = new VueComponent(options);\r\n\r\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\r\n        initSlots(this.$vm, properties.vueSlots);\r\n\r\n        // 触发首次 setData\r\n        this.$vm.$mount();\r\n      },\r\n      ready () {\r\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\r\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\r\n        if (this.$vm) {\r\n          this.$vm._isMounted = true;\r\n          this.$vm.__call_hook('mounted');\r\n          this.$vm.__call_hook('onReady');\r\n        }\r\n      },\r\n      detached () {\r\n        this.$vm && this.$vm.$destroy();\r\n      }\r\n    },\r\n    pageLifetimes: {\r\n      show (args) {\r\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\r\n      },\r\n      hide () {\r\n        this.$vm && this.$vm.__call_hook('onPageHide');\r\n      },\r\n      resize (size) {\r\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\r\n      }\r\n    },\r\n    methods: {\r\n      __l: handleLink,\r\n      __e: handleEvent\r\n    }\r\n  };\r\n  // externalClasses\r\n  if (vueOptions.externalClasses) {\r\n    componentOptions.externalClasses = vueOptions.externalClasses;\r\n  }\r\n\r\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\r\n    vueOptions.wxsCallMethods.forEach(callMethod => {\r\n      componentOptions.methods[callMethod] = function (args) {\r\n        return this.$vm[callMethod](args)\r\n      };\r\n    });\r\n  }\r\n\r\n  if (isPage) {\r\n    return componentOptions\r\n  }\r\n  return [componentOptions, VueComponent]\r\n}\r\n\r\nfunction parseComponent (vueComponentOptions) {\r\n  return parseBaseComponent(vueComponentOptions, {\r\n    isPage,\r\n    initRelation\r\n  })\r\n}\r\n\r\nconst hooks$1 = [\r\n  'onShow',\r\n  'onHide',\r\n  'onUnload'\r\n];\r\n\r\nhooks$1.push(...PAGE_EVENT_HOOKS);\r\n\r\nfunction parseBasePage (vuePageOptions, {\r\n  isPage,\r\n  initRelation\r\n}) {\r\n  const pageOptions = parseComponent(vuePageOptions);\r\n\r\n  initHooks(pageOptions.methods, hooks$1, vuePageOptions);\r\n\r\n  pageOptions.methods.onLoad = function (query) {\r\n    this.options = query;\r\n    const copyQuery = Object.assign({}, query);\r\n    delete copyQuery.__id__;\r\n    this.$page = {\r\n      fullPath: '/' + (this.route || this.is) + stringifyQuery(copyQuery)\r\n    };\r\n    this.$vm.$mp.query = query; // 兼容 mpvue\r\n    this.$vm.__call_hook('onLoad', query);\r\n  };\r\n\r\n  return pageOptions\r\n}\r\n\r\nfunction parsePage (vuePageOptions) {\r\n  return parseBasePage(vuePageOptions, {\r\n    isPage,\r\n    initRelation\r\n  })\r\n}\r\n\r\nfunction createPage (vuePageOptions) {\r\n  {\r\n    return Component(parsePage(vuePageOptions))\r\n  }\r\n}\r\n\r\nfunction createComponent (vueOptions) {\r\n  {\r\n    return Component(parseComponent(vueOptions))\r\n  }\r\n}\r\n\r\nfunction createSubpackageApp (vm) {\r\n  const appOptions = parseApp(vm);\r\n  const app = getApp({\r\n    allowDefault: true\r\n  });\r\n  const globalData = app.globalData;\r\n  if (globalData) {\r\n    Object.keys(appOptions.globalData).forEach(name => {\r\n      if (!hasOwn(globalData, name)) {\r\n        globalData[name] = appOptions.globalData[name];\r\n      }\r\n    });\r\n  }\r\n  Object.keys(appOptions).forEach(name => {\r\n    if (!hasOwn(app, name)) {\r\n      app[name] = appOptions[name];\r\n    }\r\n  });\r\n  if (isFn(appOptions.onShow) && wx.onAppShow) {\r\n    wx.onAppShow((...args) => {\r\n      appOptions.onShow.apply(app, args);\r\n    });\r\n  }\r\n  if (isFn(appOptions.onHide) && wx.onAppHide) {\r\n    wx.onAppHide((...args) => {\r\n      appOptions.onHide.apply(app, args);\r\n    });\r\n  }\r\n  if (isFn(appOptions.onLaunch)) {\r\n    const args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();\r\n    appOptions.onLaunch.call(app, args);\r\n  }\r\n  return vm\r\n}\r\n\r\nfunction createPlugin (vm) {\r\n  const appOptions = parseApp(vm);\r\n  if (isFn(appOptions.onShow) && wx.onAppShow) {\r\n    wx.onAppShow((...args) => {\r\n      appOptions.onShow.apply(vm, args);\r\n    });\r\n  }\r\n  if (isFn(appOptions.onHide) && wx.onAppHide) {\r\n    wx.onAppHide((...args) => {\r\n      appOptions.onHide.apply(vm, args);\r\n    });\r\n  }\r\n  if (isFn(appOptions.onLaunch)) {\r\n    const args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();\r\n    appOptions.onLaunch.call(vm, args);\r\n  }\r\n  return vm\r\n}\r\n\r\ntodos.forEach(todoApi => {\r\n  protocols[todoApi] = false;\r\n});\r\n\r\ncanIUses.forEach(canIUseApi => {\r\n  const apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name\r\n    : canIUseApi;\r\n  if (!wx.canIUse(apiName)) {\r\n    protocols[canIUseApi] = false;\r\n  }\r\n});\r\n\r\nlet uni = {};\r\n\r\nif (typeof Proxy !== 'undefined' && \"mp-weixin\" !== 'app-plus') {\r\n  uni = new Proxy({}, {\r\n    get (target, name) {\r\n      if (hasOwn(target, name)) {\r\n        return target[name]\r\n      }\r\n      if (baseApi[name]) {\r\n        return baseApi[name]\r\n      }\r\n      if (api[name]) {\r\n        return promisify(name, api[name])\r\n      }\r\n      {\r\n        if (extraApi[name]) {\r\n          return promisify(name, extraApi[name])\r\n        }\r\n        if (todoApis[name]) {\r\n          return promisify(name, todoApis[name])\r\n        }\r\n      }\r\n      if (eventApi[name]) {\r\n        return eventApi[name]\r\n      }\r\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\r\n        return\r\n      }\r\n      return promisify(name, wrapper(name, wx[name]))\r\n    },\r\n    set (target, name, value) {\r\n      target[name] = value;\r\n      return true\r\n    }\r\n  });\r\n} else {\r\n  Object.keys(baseApi).forEach(name => {\r\n    uni[name] = baseApi[name];\r\n  });\r\n\r\n  {\r\n    Object.keys(todoApis).forEach(name => {\r\n      uni[name] = promisify(name, todoApis[name]);\r\n    });\r\n    Object.keys(extraApi).forEach(name => {\r\n      uni[name] = promisify(name, todoApis[name]);\r\n    });\r\n  }\r\n\r\n  Object.keys(eventApi).forEach(name => {\r\n    uni[name] = eventApi[name];\r\n  });\r\n\r\n  Object.keys(api).forEach(name => {\r\n    uni[name] = promisify(name, api[name]);\r\n  });\r\n\r\n  Object.keys(wx).forEach(name => {\r\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\r\n      uni[name] = promisify(name, wrapper(name, wx[name]));\r\n    }\r\n  });\r\n}\r\n\r\nwx.createApp = createApp;\r\nwx.createPage = createPage;\r\nwx.createComponent = createComponent;\r\nwx.createSubpackageApp = createSubpackageApp;\r\nwx.createPlugin = createPlugin;\r\n\r\nvar uni$1 = uni;\r\n\r\nexport default uni$1;\r\nexport { createApp, createComponent, createPage, createPlugin, createSubpackageApp };\r\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    if (!options.components) {\n      options.components = {}\n    }\n    var hasOwn = Object.prototype.hasOwnProperty\n    for (var name in components) {\n      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {\n        options.components[name] = components[name]\n      }\n    }\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","/*!\n * Vue.js v2.6.11\n * (c) 2014-2021 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      if (vm.$options && vm.$options.__file) { // fixed by xxxxxx\n        return ('') + vm.$options.__file\n      }\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm && vm.$options.name !== 'PageBody') {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        !vm.$options.isReserved && tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if (process.env.NODE_ENV !== 'production' && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n  Dep.target = Dep.SharedObject.target;\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (process.env.NODE_ENV !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false)\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\n  if (isUndef(propOptions)) {\n    return res\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\n    }\n  }\n  return res\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i, i++)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if (process.env.NODE_ENV !== 'production' && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (process.env.NODE_ENV !== 'production') {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    !vm._$fallback && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    !vm._$fallback && initProvide(vm); // resolve provide after data/props\n    !vm._$fallback && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\n\nfunction flushCallbacks$1(vm) {\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\n        if (process.env.VUE_APP_DEBUG) {\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\n        }\n        var copies = vm.__next_tick_callbacks.slice(0);\n        vm.__next_tick_callbacks.length = 0;\n        for (var i = 0; i < copies.length; i++) {\n            copies[i]();\n        }\n    }\n}\n\nfunction hasRenderWatcher(vm) {\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\n}\n\nfunction nextTick$1(vm, cb) {\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\n    //2.nextTick 之前存在 render watcher\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(process.env.VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\n        return nextTick(cb, vm)\n    }else{\n        if(process.env.VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\n    var _resolve;\n    if (!vm.__next_tick_callbacks) {\n        vm.__next_tick_callbacks = [];\n    }\n    vm.__next_tick_callbacks.push(function () {\n        if (cb) {\n            try {\n                cb.call(vm);\n            } catch (e) {\n                handleError(e, vm, 'nextTick');\n            }\n        } else if (_resolve) {\n            _resolve(vm);\n        }\n    });\n    // $flow-disable-line\n    if (!cb && typeof Promise !== 'undefined') {\n        return new Promise(function (resolve) {\n            _resolve = resolve;\n        })\n    }\n}\n\n/*  */\n\nfunction cloneWithData(vm) {\n  // 确保当前 vm 所有数据被同步\n  var ret = Object.create(null);\n  var dataKeys = [].concat(\n    Object.keys(vm._data || {}),\n    Object.keys(vm._computedWatchers || {}));\n\n  dataKeys.reduce(function(ret, key) {\n    ret[key] = vm[key];\n    return ret\n  }, ret);\n\n  // vue-composition-api\n  var compositionApiState = vm.__composition_api_state__ || vm.__secret_vfa_state__;\n  var rawBindings = compositionApiState && compositionApiState.rawBindings;\n  if (rawBindings) {\n    Object.keys(rawBindings).forEach(function (key) {\n      ret[key] = vm[key];\n    });\n  }\n\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\n  Object.assign(ret, vm.$mp.data || {});\n  if (\n    Array.isArray(vm.$options.behaviors) &&\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\n  ) { //form-field\n    ret['name'] = vm.name;\n    ret['value'] = vm.value;\n  }\n\n  return JSON.parse(JSON.stringify(ret))\n}\n\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\n  if (vnode === null) { //destroy\n    return\n  }\n  if (this.mpType === 'page' || this.mpType === 'component') {\n    var mpInstance = this.$scope;\n    var data = Object.create(null);\n    try {\n      data = cloneWithData(this);\n    } catch (err) {\n      console.error(err);\n    }\n    data.__webviewId__ = mpInstance.data.__webviewId__;\n    var mpData = Object.create(null);\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\n      mpData[key] = mpInstance.data[key];\n    });\n    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);\n    if (Object.keys(diffData).length) {\n      if (process.env.VUE_APP_DEBUG) {\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\n          ']差量更新',\n          JSON.stringify(diffData));\n      }\n      this.__next_tick_pending = true;\n      mpInstance.setData(diffData, function () {\n        this$1.__next_tick_pending = false;\n        flushCallbacks$1(this$1);\n      });\n    } else {\n      flushCallbacks$1(this);\n    }\n  }\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  !vm._$fallback && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\n\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\n\nfunction getTarget(obj, path) {\n  var parts = path.split('.');\n  var key = parts[0];\n  if (key.indexOf('__$n') === 0) { //number index\n    key = parseInt(key.replace('__$n', ''));\n  }\n  if (parts.length === 1) {\n    return obj[key]\n  }\n  return getTarget(obj[key], parts.slice(1).join('.'))\n}\n\nfunction internalMixin(Vue) {\n\n  Vue.config.errorHandler = function(err, vm, info) {\n    Vue.util.warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    console.error(err);\n    /* eslint-disable no-undef */\n    var app = typeof getApp === 'function' && getApp();\n    if (app && app.onError) {\n      app.onError(err);\n    }\n  };\n\n  var oldEmit = Vue.prototype.$emit;\n\n  Vue.prototype.$emit = function(event) {\n    if (this.$scope && event) {\n      this.$scope['triggerEvent'](event, {\n        __args__: toArray(arguments, 1)\n      });\n    }\n    return oldEmit.apply(this, arguments)\n  };\n\n  Vue.prototype.$nextTick = function(fn) {\n    return nextTick$1(this, fn)\n  };\n\n  MP_METHODS.forEach(function (method) {\n    Vue.prototype[method] = function(args) {\n      if (this.$scope && this.$scope[method]) {\n        return this.$scope[method](args)\n      }\n      // mp-alipay\n      if (typeof my === 'undefined') {\n        return\n      }\n      if (method === 'createSelectorQuery') {\n        /* eslint-disable no-undef */\n        return my.createSelectorQuery(args)\n      } else if (method === 'createIntersectionObserver') {\n        /* eslint-disable no-undef */\n        return my.createIntersectionObserver(args)\n      }\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\n    };\n  });\n\n  Vue.prototype.__init_provide = initProvide;\n\n  Vue.prototype.__init_injections = initInjections;\n\n  Vue.prototype.__call_hook = function(hook, args) {\n    var vm = this;\n    // #7573 disable dep collection when invoking lifecycle hooks\n    pushTarget();\n    var handlers = vm.$options[hook];\n    var info = hook + \" hook\";\n    var ret;\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\n      }\n    }\n    if (vm._hasHookEvent) {\n      vm.$emit('hook:' + hook, args);\n    }\n    popTarget();\n    return ret\n  };\n\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\n    if (Array.isArray(modifiers)) {\n      if (modifiers.indexOf('trim') !== -1) {\n        value = value.trim();\n      }\n      if (modifiers.indexOf('number') !== -1) {\n        value = this._n(value);\n      }\n    }\n    if (!target) {\n      target = this;\n    }\n    target[key] = value;\n  };\n\n  Vue.prototype.__set_sync = function(target, key, value) {\n    if (!target) {\n      target = this;\n    }\n    target[key] = value;\n  };\n\n  Vue.prototype.__get_orig = function(item) {\n    if (isPlainObject(item)) {\n      return item['$orig'] || item\n    }\n    return item\n  };\n\n  Vue.prototype.__get_value = function(dataPath, target) {\n    return getTarget(target || this, dataPath)\n  };\n\n\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\n    return renderClass(staticClass, dynamicClass)\n  };\n\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\n    if (!dynamicStyle && !staticStyle) {\n      return ''\n    }\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\n  };\n\n  Vue.prototype.__map = function(val, iteratee) {\n    //TODO 暂不考虑 string\n    var ret, i, l, keys, key;\n    if (Array.isArray(val)) {\n      ret = new Array(val.length);\n      for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = iteratee(val[i], i);\n      }\n      return ret\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      ret = Object.create(null);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[key] = iteratee(val[key], key, i);\n      }\n      return ret\n    } else if (typeof val === 'number') {\n      ret = new Array(val);\n      for (i = 0, l = val; i < l; i++) {\n        // 第一个参数暂时仍和小程序一致\n        ret[i] = iteratee(i, i);\n      }\n      return ret\n    }\n    return []\n  };\n\n}\n\n/*  */\n\nvar LIFECYCLE_HOOKS$1 = [\n    //App\n    'onLaunch',\n    'onShow',\n    'onHide',\n    'onUniNViewMessage',\n    'onPageNotFound',\n    'onThemeChange',\n    'onError',\n    'onUnhandledRejection',\n    //Page\n    'onInit',\n    'onLoad',\n    // 'onShow',\n    'onReady',\n    // 'onHide',\n    'onUnload',\n    'onPullDownRefresh',\n    'onReachBottom',\n    'onTabItemTap',\n    'onAddToFavorites',\n    'onShareTimeline',\n    'onShareAppMessage',\n    'onResize',\n    'onPageScroll',\n    'onNavigationBarButtonTap',\n    'onBackPress',\n    'onNavigationBarSearchInputChanged',\n    'onNavigationBarSearchInputConfirmed',\n    'onNavigationBarSearchInputClicked',\n    //Component\n    // 'onReady', // 兼容旧版本，应该移除该事件\n    'onPageShow',\n    'onPageHide',\n    'onPageResize'\n];\nfunction lifecycleMixin$1(Vue) {\n\n    //fixed vue-class-component\n    var oldExtend = Vue.extend;\n    Vue.extend = function(extendOptions) {\n        extendOptions = extendOptions || {};\n\n        var methods = extendOptions.methods;\n        if (methods) {\n            Object.keys(methods).forEach(function (methodName) {\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\n                    extendOptions[methodName] = methods[methodName];\n                    delete methods[methodName];\n                }\n            });\n        }\n\n        return oldExtend.call(this, extendOptions)\n    };\n\n    var strategies = Vue.config.optionMergeStrategies;\n    var mergeHook = strategies.created;\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\n        strategies[hook] = mergeHook;\n    });\n\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\n}\n\n/*  */\n\n// install platform patch function\nVue.prototype.__patch__ = patch;\n\n// public mount method\nVue.prototype.$mount = function(\n    el ,\n    hydrating \n) {\n    return mountComponent$1(this, el, hydrating)\n};\n\nlifecycleMixin$1(Vue);\ninternalMixin(Vue);\n\n/*  */\n\nexport default Vue;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import Vue from 'vue';\n//创建EventBus\nexport const EventBus = new Vue();","const rightNotes = [\r\n\t{step: 2, do: \"C\", file: \"C6\", pos: \"-2.8%\", pitchName: \"do\"},\r\n\t{step: 1, do: \"B\", file: \"B5\", pos: \"0%\", pitchName: \"si\"},\r\n\t{step: 1, do: \"A\", file: \"A5\", pos: \"2.8%\", pitchName: \"la\"},\r\n\t{step: 1, do: \"G\", file: \"G5\", pos: \"5.6%\", pitchName: \"sol\"},\r\n\t{step: 1, do: \"F\", file: \"F5\", pos: \"8.4%\", pitchName: \"fa\"},\r\n\t{step: 1, do: \"E\", file: \"E5\", pos: \"11.1%\", pitchName: \"mi\"},\r\n\t{step: 1, do: \"D\", file: \"D5\", pos: \"13.9%\", pitchName: \"re\"},\r\n\t{step: 1, do: \"C\", file: \"C5\", pos: \"16.7%\", pitchName: \"do\"},\r\n\t{step: 0, do: \"B\", file: \"B4\", pos: \"19.6%\", pitchName: \"si\"},\r\n\t{step: 0, do: \"A\", file: \"A4\", pos: \"22.2%\", pitchName: \"la\"},\r\n\t{step: 0, do: \"G\", file: \"G4\", pos: \"25.0%\", pitchName: \"sol\"},\r\n\t{step: 0, do: \"F\", file: \"F4\", pos: \"27.8%\", pitchName: \"fa\"},\r\n\t{step: 0, do: \"E\", file: \"E4\", pos: \"30.5%\", pitchName: \"mi\"},\r\n\t{step: 0, do: \"D\", file: \"D4\", pos: \"33.3%\", pitchName: \"re\"},\r\n\t{step: 0, do: \"C\", file: \"C4\", pos: \"36.0%\", pitchName: \"do\"},\r\n\t{step: -1, do: \"B\", file: \"B3\", pos: \"38.8%\", pitchName: \"si\"},\r\n\t{step: -1, do: \"A\", file: \"A3\", pos: \"41.6%\", pitchName: \"la\"}\r\n]\r\n\r\nconst leftNotes = [\r\n\t{step: 0, do: \"E\", file: \"E4\", pos: \"52.8%\", pitchName: \"mi\"},\r\n\t{step: 0, do: \"D\", file: \"D4\", pos: \"55.6%\", pitchName: \"re\"},\r\n\t{step: 0, do: \"C\", file: \"C4\", pos: \"58.4%\", pitchName: \"do\"},\r\n\t{step: -1, do: \"B\", file: \"B3\", pos: \"61.1%\", pitchName: \"si\"},\r\n\t{step: -1, do: \"A\", file: \"A3\", pos: \"63.9%\", pitchName: \"la\"},\r\n\t{step: -1, do: \"G\", file: \"G3\", pos: \"66.7%\", pitchName: \"sol\"},\r\n\t{step: -1, do: \"F\", file: \"F3\", pos: \"69.5%\", pitchName: \"fa\"},\r\n\t{step: -1, do: \"E\", file: \"E3\", pos: \"72.2%\", pitchName: \"mi\"},\r\n\t{step: -1, do: \"D\", file: \"D3\", pos: \"75.0%\", pitchName: \"re\"},\r\n\t{step: -1, do: \"C\", file: \"C3\", pos: \"77.8%\", pitchName: \"do\"},\r\n\t{step: -2, do: \"B\", file: \"B2\", pos: \"80.6%\", pitchName: \"si\"},\r\n\t{step: -2, do: \"A\", file: \"A2\", pos: \"83.3%\", pitchName: \"la\"},\r\n\t{step: -2, do: \"G\", file: \"G2\", pos: \"86.1%\", pitchName: \"sol\"},\r\n\t{step: -2, do: \"F\", file: \"F2\", pos: \"88.9%\", pitchName: \"fa\"},\r\n\t{step: -2, do: \"E\", file: \"E2\", pos: \"91.7%\", pitchName: \"mi\"},\r\n\t{step: -2, do: \"D\", file: \"D2\", pos: \"94.4%\", pitchName: \"re\"},\r\n\t{step: -2, do: \"C\", file: \"C2\", pos: \"97.2%\", pitchName: \"do\"}\r\n]\r\n\r\nconst getRandomNoteItem = function() {\r\n\tvar length = rightNotes.length\r\n\tvar index = Math.floor(Math.random() * length)\r\n\tif (Math.random() > 0.5) {\r\n\t\t// 右手\r\n\t\treturn rightNotes[index]\r\n\t} else {\r\n\t\t// 左手\r\n\t\treturn leftNotes[index]\r\n\t}\r\n}\r\n\r\nexport default {\r\n\tgetRandomNoteItem,\r\n\tleftNotes,\r\n\trightNotes\r\n}","/**\r\n * 键盘配置参数\r\n */\r\nexport default {\r\n    getKeyboardConfig() {\r\n        return {\r\n\t\t\tkeyboardHeight: {\r\n\t\t\t    type: String,\r\n\t\t\t    default: \"30%\",\r\n\t\t\t    required: false\r\n\t\t\t}\r\n\t\t}\r\n    },\r\n}","export default function getNoteOgg() {\r\n\treturn {\r\n\t\tC: \"data:audio/ogg;base64,\",\r\n\t\tUpC: \"data:audio/ogg;base64,\",\r\n\t\tD: \"data:audio/ogg;base64,\",\r\n\t\tUpD: \"data:audio/ogg;base64,\",\r\n\t\tE: \"data:audio/ogg;base64,\",\r\n\t\tF: \"data:audio/ogg;base64,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\",\r\n\t\tUpF: \"data:audio/ogg;base64,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\",\r\n\t\tG: \"data:audio/ogg;base64,\",\r\n\t\tUpG: \"data:audio/ogg;base64,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\",\r\n\t\tA: \"data:audio/ogg;base64,\",\r\n\t\tUpA: \"data:audio/ogg;base64,\",\r\n\t\tB: \"data:audio/ogg;base64,\",\r\n\t}\r\n}"],"sourceRoot":""}